import streamlit as st
from pages.functions.definitions import *

set_page_config()
gen_back_button()

mediad="/home/app/app/pages/media"

def subheadercontents(text, contents, anchor=None, divider=None):
    st.subheader(text, divider=divider, anchor=anchor)
    contents.append(f'\n* [{text}](#{anchor})')

def mk(text):
    st.markdown(text)

def im(*x, **y):
    st.image(*x, **y)

tcontents = st.expander(f"Table of contents")
contents = []

st.subheader("KAIROS documentation", divider='rainbow')
subheadercontents("Getting started with Kairos", contents, anchor='gstart', divider='rainbow') 
mk("**Why this acronym?**") 
mk("**Kairos** (καιρός) is an ancient Greek word meaning the right or opportune moment (the supreme moment). The ancient Greeks had two words for time, chronos and kairos. While the former refers to chronological or sequential time, the latter signifies a time lapse, a moment of indeterminate time in which everything happens. (Wikipedia)") 
mk("**Kairos** is a tool intended to analyze and correlate events coming from computer environments.") 
im(f"{mediad}/kdoc1.png", caption="Kairos example with Oracle database") 
mk("**Kairos** allows to analyze events at second level in a particular area (here ASH data coming from Oracle) ...") 
im(f"{mediad}/kdoc2.png", caption="Kairos example with Oracle E-business suite") 
mk("... via an analysis of a day of activity in another area (here waiting programs in Oracle E-Business suite) ...") 
im(f"{mediad}/kdoc3.png", caption="Kairos example with NMON") 
mk("... until a consolidated view grouping nodes on several month in a third area (here NMON data cumulated on 2 nodes).") 
mk("**KAIROS** …")
mk("- addresses statistics coming from any domain (Database, System, Middleware, Applications, …)")
mk("- allows to average, aggregate data on time axis")
mk("- allows to consolidate data among nodes")
mk("- allows to compare activities in time or between nodes")
mk("- helps an expert to identify slownesses, consuming resources or drifts")


subheadercontents("KAIROS links on Internet", contents, anchor='klinks', divider='rainbow') 
mk("KAIROS is an open source software with a LGPL3 licence.")
mk("The source code of KAIROS can be found at this address: https://github.com/gduvalsc/kairos/")
mk("KAIROS can be freely downloaded from this address: https://hub.docker.com/r/gdsc/kairos/")
mk("GDSC provides support and maintenance to customers with an annual fee.")
mk("The system used to provide support (FRESHDESK) is available at this address: https://openkairos.freshdesk.com/helpdesk")


subheadercontents("About KAIROS windows interface", contents, anchor='abwi', divider='rainbow') 
mk("Starting from KAIROS V3.1, the windows interface is based on DHTMLX in the GNU GPL license.")
mk("When the KAIROS URL is requested in a browser, a login screen appears. Each KAIROS user must be created by an administrator. The password value is updatable by the KAIROS user. The initial value is the user id.")
im(f"{mediad}/kdocwi1.png", caption="Karios login page") 
mk("After been authenticated, the KAIROS user has the following window in front of him.")
im(f"{mediad}/kdocwi2.png", caption="Kairos page after logon")
im(f"{mediad}/kdocwi3.png", caption="Kairos page after logon") 
mk("The status bar indicates when the KAIROS server is working (or not) for the connected user")
im(f"{mediad}/kdocwi4.png", caption="Kairos status bar when command is running") 
mk("KAIROS displays a lot of windows")
im(f"{mediad}/kdocwi5.png", caption="Kairos window") 
mk("When a window is opened, this window is included in the list of windows so that it can be recalled very quickly.")
im(f"{mediad}/kdocwi6.png", caption="Kairos list of opened windows") 
mk("A right click on a node allows to open a context menu with a lot of available options:")
im(f"{mediad}/kdocwi7.png", caption="Kairos context menus") 
mk("The available options are depending on the node type where the right click is issued")

subheadercontents("About KAIROS security", contents, anchor='absec', divider='rainbow') 
mk("KAIROS is delivered as a Docker container.")
mk("Port 443 is exposed within the container.")
mk("The physical machine must be accessible through https in the customer network.")
mk("The KAIROS user has nothing to install on his laptop. The requirement for him is to use a recent browser (Firefox, Chrome, IE, ... ) supporting HTML5.")
mk("The default certificate delivered by GDSC is a self-signed certificate. Normally, this certificate should be changed by the administrator of the physical system supporting the KAIROS container. It should be replaced by a valid certificate in the customer organisation.") 

subheadercontents("How to install KAIROS on a server", contents, anchor='install', divider='rainbow')
mk("KAIROS has only one dependency which is DOCKER or any DOCKER compatible software like PODMAN. KAIROS can be installed on any platform supporting DOCKER/PODMAN. For a full list , you can consult this page (https://docs.docker.com/engine/install/)")
mk("KAIROS is delivered as a docker image. There are only 4 steps to install KAIROS:")
mk("- Install Docker or Podman")
mk("- Pull a Kairos image from Docker Hub")
mk("- Create a Kairos container")
mk("- Start this container")
mk("The step 1 is described in the docker documentation (see the link above).")
mk("The step 2 can be very easy, if the server where docker is installed has an access to Internet. The command to run is:")
st.code("docker pull gdsc/kairos")
mk('In that case, the "latest" version of gdsc/kairos will be pulled from the docker repository.')
mk("In case your server doesn't have access to Internet, you can pull the image from a server or a laptop having access to Internet, save this image to a tar file, transport the tar file to the system where KAIROS must be installed and load the KAIROS image from the tar file.")
mk("The step 3 can be accomplished with the following command:")
st.code("""        
docker create 
    -it 
    --name kairos 
    -h kairos 
    -p 443:443 
    -v /Users/gdsc/Documents/kairos/9.0/data:/postgres/data 
    -v /Users/gdsc/Documents/kairos/export:/export
    -v /Users/gdsc/Documents/kairos/9.0/autoupload:/autoupload 
    gdsc/kairos
""")
mk("-p options are used to forward ports between the host system hosting docker and the container being created.")
mk("-v options are used to mount within the created container directories belonging to the host.")
mk("The best practise is to avoid to have repositories within the container. They must be hosted outside. With this best practise, when you upgrade to a new version of the software, you don't have to export and import your data (except when a new postgres version is installed)")
mk("The last step (step 4) is to start the container. The command is:")
st.code("docker start kairos")
mk("kairos is the name specified by --name in the docker create command.")
mk('Once started, docker is immediately available to users. Of course, in a fresh installation, there is only one user available ("admin" user with "admin" password). From there, the administrator can change his password, create users and give them access to this server.')
mk("There is nothing to install on the laptop of the KAIROS user. Only a recent browser supporting HTML5 is required.")

subheadercontents("How to choose the repository to work with", contents, anchor='repo', divider='rainbow')
mk('Each KAIROS users has is own personal repository. For example, the user with the id "examples" has a full access to the repository named "kairos_user_examples". The rule is to concatenate "kairos_user_" with the user id.')
mk('In the same way, when a role is created, a new repository is created. If the role id is "xxxx", the repository attached to this role will be "kairos_group_xxxx". The rule is to concatenate "kairos_group_" with the role id.')
mk('When a role is granted to a KAIROS user, this user has a full access to the repository attached to the role.')
mk('Example: we have a KAIROS user "examples" and this user has been granted to the role named "shared_examples". When this user connects to KAIROS, he has access to these 2 repositories.')
mk('Question: How does he select the repository to work with ?')
mk('Answer: in the following way:')
mk('First the user must open the settings windows')
im(f"{mediad}/kdocrep1.png", caption="Kairos access to settings") 
mk('The settings window is also reachable from the main toolbar (there is a quick link to the settings window).')
mk('The settings window is then open with the following content:')
im(f"{mediad}/kdocrep2.png", caption="Kairos settings view") 
mk('This window contain a list of options. To select the repository to work with, the interesting option is "Nodes database". Here there are a select list (one or more possibilities). The current option is visible.')
mk('Here in the example, we have "kairos_user_examples". this is the default repository attached to the connected user.')
mk('To update this option, the user can choose an other option in the select list and record the choice by pressing "update settings".')
mk('Settings are stored in the KAIROS server. They are attached to a user.')
mk('When the user has selected the repository to work with, he can then, call the explorer to see the content of this repository:')
im(f"{mediad}/kdocrep3.png", caption="Kairos access to current repository") 
mk('The following window is then displayed:')
im(f"{mediad}/kdocrep4.png", caption="Kairos repository content") 
mk('A tree appears in the body of the window. This tree is populated dynamically in function of the user interaction.')
mk('In the window header, the name of the repository is written.')

subheadercontents("How to create a new user", contents, anchor='user', divider='rainbow')
mk('This task is reserved to the administrator of the KAIROS site.')
im(f"{mediad}/kdocusr1.png", caption="Kairos admin login") 
mk('Once connected to the KAIROS server, the administrator has access, through the main menu,  to a "manage users" option.')
im(f"{mediad}/kdocusr2.png", caption="Kairos manage users access") 
mk('The actual list of users is displayed. A button is available to create a new user.')
im(f"{mediad}/kdocusr3.png", caption="Kairos manage users window") 
mk('Once the "create user" button is pressed, a form is opened requesting a new id.')
im(f"{mediad}/kdocusr4.png", caption="Kairos create user") 
mk('Pushing "Create" submits the new user id to KAIROS and an answer is returned by the system.')
mk('If the new id is accepted by KAIROS, a green message is displayed and the new user id appears in the list of current users.')
im(f"{mediad}/kdocusr5.png", caption="Kairos user successfully created") 
mk('In case of failure, a red message is displayed.')
im(f"{mediad}/kdocusr6.png", caption="Kairos user creation error") 
mk('The new created user is defined with a password identical to the id.')
mk('The first task of the user should be to change this password at the first connection to the KAIROS system')
mk('When a user has been created, his "id" is available in the select list of the login form')
im(f"{mediad}/kdocusr7.png", caption="Kairos user appearing in the login form") 

subheadercontents("How to create a new role/group", contents, anchor='role', divider='rainbow')
mk('A role is something useful when 2 or more KAIROS users want to share the same data. Instead of using his own repository, the KAIROS user will define as current the repository attached to the role.')
mk('The action to create a role is reserved to the KAIROS administrator.')
im(f"{mediad}/kdocgrp1.png", caption="Kairos admin login") 
mk('Once connected, the administrator opens the main menu and chooses "Manage roles"')
im(f"{mediad}/kdocgrp2.png", caption="Kairos manage roles access") 
mk('A "Create Role" button is then available.')
im(f"{mediad}/kdocgrp3.png", caption="Kairos manage roles window") 
mk('After "Create role" has been pushed, a new form appears to get the role id.')
im(f"{mediad}/kdocgrp4.png", caption="Kairos creale role") 
mk('Pushing "Create" will require KAIROS to create this role with the provided id.')
mk('In case of success, a green message appears indicating that the role has been created. The new created role appears in the list as well as all KAIROS roles.')
im(f"{mediad}/kdocgrp5.png", caption="Kairos role successfully created") 
mk('In case of failure, a red message indicates why the request was not successful.')
im(f"{mediad}/kdocgrp6.png", caption="Kairos role creation error") 
mk('When the role has been created, it must be granted to one or more KAIROS users. See "how to grant a role".')

subheadercontents("How to grant a role to a user", contents, anchor='grant', divider='rainbow')
mk('A role represents a repository shared by several KAIROS users. The action to attach a role to 1 or several users is reserved to the administrator.')
im(f"{mediad}/kdocgrt1.png", caption="Kairos admin login") 
mk('Once connected, the administrator opens the main menu and chooses "Manage grants".')
im(f"{mediad}/kdocgrt2.png", caption="Kairos manage grants access") 
mk('A new window is displayed. A "Grant role" button is then available.')
im(f"{mediad}/kdocgrt3.png", caption="Kairos manage grants window") 
mk('When "Grant role" has been pushed, a new form appears requesting 2 values:')
mk('- The user to be granted')
mk('- The role to grant')
im(f"{mediad}/kdocgrt4.png", caption="Kairos creale grant") 
mk('After pushing "Grant" the request is submitted to KAIROS. If the result is successful, a green message will be returned. All associations between roles and users are visibles in the grid.')
im(f"{mediad}/kdocgrt5.png", caption="Kairos grant successfully created") 
mk('In case of error, a red message is displayed indicating the error reason')
im(f"{mediad}/kdocgrt6.png", caption="Kairos grant creation error") 
mk('Once the role has been granted to a KAIROS user, this role can be chosen in the "Settings" options of this user.')

subheadercontents("How to change the user's password", contents, anchor='passwd', divider='rainbow')
mk('This is the responsibility of each user. When the user is created with an id, the default password value is the value of the id.')
mk('So if "my_new_user" is the id, the password will be "my_new_user".')
mk('To change this default value, once connected, the user must open the main menu and choose "Manage password"')
im(f"{mediad}/kdocpwd1.png", caption="Kairos manage password access") 
mk('A new form is then displayed and the user can change his password.')
im(f"{mediad}/kdocpwd2.png", caption="Kairos manage password window") 
mk('After pushing "Set new password", KAIROS will check values and store a hash value of the provided password. The password value is not stored within KAIROS. That means that the password cannot be recovered. If the user has forgotten the password value, the user repository must be renamed, the user must be deleted, created again  and the renamed repository must be renamed to the original value.')
mk('In case of success, KAIROS will return:')
im(f"{mediad}/kdocpwd3.png", caption="Kairos password successfully updated") 
mk('There is no rule to constrain the password value (minimum length, special characters, ...). This is the user responsibility to define a password as strong as possible especially if the access to the KAIROS system is available on Internet and not exclusively within an Intranet.')

subheadercontents("How to play with the explorer", contents, anchor='explore', divider='rainbow')
mk('The explorer is the central part of KAIROS.')
im(f"{mediad}/kdocxpl1.png", caption="Kairos explorer") 
mk('This a tree containing objects called "nodes". Within KAIROS the user can organize nodes as he wants and give nodes the meaning he wants.')
mk('Nodes are stored in the server part of KAIROS in a Postgres database')
mk('In the client part of KAIROS, nodes are discovered dynamically in function of the user interactions')
im(f"{mediad}/kdocxpl2.png", caption="Kairos tree") 
mk('Nodes have different colors indicating their type.')
mk('Gold nodes have the "N" type. They are like directories in a tree. They contain nodes but they not wear a special meaning.')
im(f"{mediad}/kdocxpl3.png", caption="Kairos yellow nodes") 
mk('Blue nodes have the "B" type. They contain uploaded data and when they are selected, they normally show a lot of menus in the menu bar.')
im(f"{mediad}/kdocxpl4.png", caption="Kairos blue nodes") 
mk('A click on a chosen option (here Top SQL requests) has the side effect to open a new window with a specific content (here a chart)')
im(f"{mediad}/kdocxpl5.png", caption="Kairos chart") 
mk('Red nodes have the "A" type. They don''t contain uploaded data but they are derived from "B" nodes or  "A" nodes by applying aggregate functions.')
im(f"{mediad}/kdocxpl6.png", caption="Kairos red nodes") 
mk('There are 3 ways to aggregate data:')
mk('- averaging')
mk('We have, for example, data for every 10 seconds and we want to generate a chart with a point per hour.')
mk('- gathering')
mk('We have several "B" nodes, each representing a day of activity and we want to gather them to show a month of activity')
mk('- consolidating')
mk('We have several "B" nodes showing, for example, the activity of a cluster and we want a single view with all the consolidated data.')
mk('A red node has a set of producers. It''s possible to view these producers by calling the "Open node" function available in the context menu')
im(f"{mediad}/kdocxpl7.png", caption="Kairos node attributes") 
mk('Green nodes have the "C" type. They are used to compare 2 or more nodes.')
im(f"{mediad}/kdocxpl8.png", caption="Kairos green nodes") 
mk('Purple nodes have the "L" type. They are very specific. It''s a way to automate the production of "A" nodes within a directory.')
im(f"{mediad}/kdocxpl9.png", caption="Kairos purple nodes") 
mk('There is a trash which has the "T" type.')
mk('And finally we have Light blue nodes with an icon representing a database. They have the "D" type. They are dynamic nodes able to show data in real time. These nodes can be aggregated in "A" nodes or even compared in "C" nodes.')
im(f"{mediad}/kdocxpl10.png", caption="Kairos light blue nodes") 
mk('A "D" node is like a "B" node. The main difference between them: In a "B" node, data is contained within reports (text files to be analyzed to get the content). In a "D" node, data is obtained by executing a request against a server.')
mk('Data can be reorganized within the tree within the tree by dragging  and dropping an item over an other item.')
mk('Dropping an item over or within the trash is equivalent to delete this item and the associated nodes contained in it.')

subheadercontents("About KAIROS architecture", contents, anchor='arch', divider='rainbow')
mk('KAIROS is an open source product delivered as a DOCKER container ready to run. It can be installed anywhere where DOCKER is installed.')
im(f"{mediad}/kdocarc1.png", caption="Kairos architecture") 
mk('It''s highly preferable to avoid to store data within the KAIROS container. The main reason is to preserve data when the container is destroyed and recreated')
mk('Data should be stored on the physical system hosting the KAIROS container or on a network device mounted on the physical system. The mounting points /postgres/data is provided for this usage.')
mk('Another mounting point (/autoupload) is provided in order to upload automatically data coming from production systems. This mounting point is optional. Data can always be uploaded manually from the user interface.')
mk('The last mounting point (/export) is used for Kairos migration purposes to higher versions.')
mk('In addition to mounting points, the KAIROS container is exposing port 443.  Port (443) is mandatory: any user playing with docker will use a browser connecting to the physical host through "https".')
mk('KAIROS is delivered with a default certificate, but for security reasons within user organisations, this certificate should be replaced by an authenticated certificate valid in the customer organisation.')
mk('The KAIROS end user can use any system to access KAIROS with a modern browser (Internet Explorer, Chrome, Firefox, Safari, ...) if this browser is recent enough to support HTML5.')
mk('Of course, the browser must be able to reference the IP Adress of the physical system supporting KAIROS through the port routed to port 443 (p2 in the schema above).')
mk('When the container is started, the following list of processes can be seen:')
im(f"{mediad}/kdocarc2.png", caption="Kairos architecture") 
mk('The main process started by Kairos is "KairosMain".')
mk('Depending on the number of processors available, KairosMain will launch one or several workers (processes with id "KairosWorker").')
mk('These workers answer to http requests submitted by KAIROS users.')
mk('The role of "KairosNotifier" process is to monitor the "/autoupload" directory and wake up KAIROS when one or more files has been deposit under this directory.')
im(f"{mediad}/kdocarc3.png", caption="Kairos security")
mk('In terms of security, if there are firewalls in your organization and if Kairos needs to traverse these firewalls, it may be necessary to allow the opening of ports for the "https" and "ssh" protocols. When Kairos accesses an external Oracle database through a "live object," it uses the SQLNet protocol. In this case, if there is a firewall to traverse, it is necessary to allow SQLNet traffic through the firewall or create an SSH tunnel.')

subheadercontents("How to upload data within KAIROS", contents, anchor='upload', divider='rainbow')
mk('There are 2 ways to upload data within KAIROS: a manual way and an automatic way.')
mk('###### About the automatic upload')
mk('KAIROS provides a mounting point "**/autoupload**" to manage this functionality. If a user wants to upload data in the "kairos_user_examples" in an automatic way, he has to check if the "kairos_user_examples" directory  exists under the directory mounted to "/autoupload". After this initial checking, any zip or tgz file moved in this directory will be processed by Kairos.')
mk('In fact a daemon is always listening to changes in this directory. When a file has been written, on close, the daemon uploads data in the KAIROS repository. When upload is complete, the file is removed from the input directory.')
mk('Suppose we move the file "a_b_c.zip" under /autoupload/kairos_user_examples. After a while (a few seconds), if we explore the tree corresponding to the "kairos_user_examples" repository, we should see under "/" a node named "a", under "a" a node named "b" and under "b" a node named "c" with a blue flag. The "_" (underscore) character is used to transform the file name to a tree. The full path must be provided in the automatic way.')
mk('###### About the manual upload')
mk('When there is no link between the production systems and KAIROS, data captured from production systems must be transferred to kairos in a way to be defined (depending of the customer environment). If the data is transferred to the user laptop, the manual upload can be used to move data in the kairos repository.')
mk('In this case, the KAIROS user opens an explorer in the user interface and choose the node under which data must be uploaded.')
mk('Example:')
im(f"{mediad}/kdocupl1.png", caption="Upload")
mk('A new form is displayed suggesting to add one or more files ....')
im(f"{mediad}/kdocupl2.png", caption="Add files")
mk('A single click on "Add files" allows to add one or more files to be uploaded')
im(f"{mediad}/kdocupl3.png", caption="Select files")
im(f"{mediad}/kdocupl4.png", caption="Upload running")
mk('Once the operation is done, the "upload" form can be closed and normally data is available in the tree at the place where it''s supposed to be:')
im(f"{mediad}/kdocupl5.png", caption="After upload")
mk('Note that file names with "_" inside are exploded to a tree under the node in which we have initiated "upload"')
mk('After this, data is available to be explored within KAIROS.')

subheadercontents("How to average data within KAIROS", contents, anchor='average', divider='rainbow')
mk('###### Justifying averaging')
mk('Some data can be very detailed: with Oracle ASH, one point every 10 seconds means 8640 points a day...')
mk('Working with many can points can be handicapping for performance (a lot of memory involved) and for readability.')
mk('Example with ASH data: Imagine the following picture:')
im(f"{mediad}/kdocavg1.png", caption="Select report")
mk('We have a single report "SAMPLE1" containing ASH Data. Let''s now view a typical chart:')
im(f"{mediad}/kdocavg2.png", caption="Chart with many points")
mk('The chart is very detailed but somewhere very difficult to read. If we want to zoom, this level of detail can be very interesting, but if we want to have a global view too much details is a handicap.')
mk('So what is the solution ?')
mk('###### Averaging')
mk('To average data in KAIROS, you need to do the following:')
mk('a) create a new node near your initial node')
im(f"{mediad}/kdocavg3.png", caption="Create node")
mk('b) rename the created node')
im(f"{mediad}/kdocavg4.png", caption="Rename node")
im(f"{mediad}/kdocavg5.png", caption="Rename node")
mk('c) drag the initial node over the renamed created node while the "ALT" key is pressed')
im(f"{mediad}/kdocavg6.png", caption="Drag node")
mk('This has the effect to switch to red the chip attached to the renamed node')
mk('d) open the created node')
im(f"{mediad}/kdocavg7.png", caption="Open node")
mk('There is a lot of information about the opened node.')
mk('In the "producers" section, you can check that the current node is attached to the initial node.')
mk('In the "aggregator" section there is a lot of available options. All of them are set with a default value, but this default value can be modified.')
mk('To average data, we are going to focus our attention to the "method" selector currently set to "$none". If we push the button, we can choose between all these options:')
im(f"{mediad}/kdocavg8.png", caption="Select averaging method")
mk('For our particular example, if we want one point every hour, we can choose "$hour" in the list ....')
im(f"{mediad}/kdocavg9.png", caption="Averaging per hour")
mk('Now we are ready to push the "apply aggregator" button.')
mk('Unless a problem, the "apply aggregator" function should be very fast.')
mk('Once finished, you can select the new aggregated node in the explorer and call the same chart as in the initial node')
mk('e) displaying data on the aggregated node')
im(f"{mediad}/kdocavg10.png", caption="Display result")
mk('Now the result is more conform to our expectations: much more readable and fast to manipulate.')

subheadercontents("How to aggregate data within KAIROS", contents, anchor='aggregate', divider='rainbow')
mk('###### Justifying aggregating')
mk('With KAIROS you can record data collected at regular intervals (every day for example). Each collection will appear as a different node in the KAIROS repository.')
mk('Behind "aggregating", the idea is to give the capability to group data in a larger view in order to predict trends.')
mk('Some examples:')
mk('a) with Oracle, a request can require more and more time to execute and sometimes it''s difficult on a single day to perceive the drift. By grouping several days, it can be more easy to prove that this request is drifting')
mk('b) at the system level, you want to monitor the CPU consumption in time and determine if the system capacity must be upgraded.')
mk('###### How to aggregate ?')
mk('Aggregating uses the same mechanism as those described in "How to average data within KAIROS". In fact, "averaging" is a particular case.')
mk('Let''s take an example:')
im(f"{mediad}/kdocagg1.png", caption="Select report")
mk('In this example, we have a lot of reports (represented by nodes with blue chips). Each node represents a day of activity. ')
mk('We got data during the five first opened days of each month (Saturday, Sunday and may holidays are excluded). We want to get a consolidated view of this picture with one point per month, each point being the average of the 5 opened days of the month.')
mk('So how to build this consolidated view?')
mk('###### a) create a new node')
mk('This node can be anywhere in the tree and most probably at level of nodes we want to aggregate')
im(f"{mediad}/kdocagg2.png", caption="Create a node")
mk('###### b) rename the created node with an appropriated name')
im(f"{mediad}/kdocagg3.png", caption="Rename a node")
im(f"{mediad}/kdocagg4.png", caption="Rename a node")
mk('###### c) drag one of the nodes to be aggregated over the created node while the "Alt" key is pressed')
im(f"{mediad}/kdocagg5.png", caption="Drag node")
mk('The yellow chip is then turned to red meaning that the node is an aggregated node')
mk('###### d) open the aggregated node')
im(f"{mediad}/kdocagg6.png", caption="Open aggregated node")
im(f"{mediad}/kdocagg7.png", caption="Open aggregated node")
mk('At this step of the process, in the producers section we have only one producer. This is not what we want. We want a given number of nodes to be producers, in fact all nodes under the /SAMPLE directory with a name beginning with 2014 or more.')
mk('To update this, we need to address the "selector" field in the "aggreagator" section. The actual value is "/SAMPLE/2015-03-06$".')
mk('KAIROS interprets this field as a list of regular expression. The separator of the list is the pipe character "|". In this example there is no "|" character so the list is reduced to a single regular expression. ')
mk('To get more producers we need to modify this regular expression, for example "/SAMPLE/20."')
mk('Every node matching this expression will be a candidate to be a producer.')
mk('Let''s try (don''t forget to push apply aggregator to see the result)')
im(f"{mediad}/kdocagg8.png", caption="Choose regular expression")
mk('The result is the same: the selector has been updated but after pushing "apply aggregator" we have only one producer which is node "/SAMPLE/2015-03-06".')
mk('This is not what we were expecting.')
mk('Why ?')
mk('In fact,  we need to address the other fields in the "aggregator" section. We have the "take" selector with the value 1, "skip" with 0, ....')
mk('"Take" means: among the list of candidates, KAIROS retains "take" candidates. In this example with the value "1", KAIROS retains only one candidate among the list of candidates. Candidates are ordered by their name (here in a descending order) and the first of the the list has been retained.')
mk('So, if we modify "take" with a greater value, what happens?')
mk('Suppose we update "take" with the value "3"')
im(f"{mediad}/kdocagg9.png", caption="Select the number of reports")
mk('We have now more producers and you can check which producers are retained in the "producers" section.')
mk('If we want many nodes but we don''t know exactly the number, we can choose a big number, big enough to be sure that this number will be greater than the real number of nodes to be considered.')
mk('For example 1000:')
im(f"{mediad}/kdocagg10.png", caption="Select the number of reports")
mk('Now the list of producers is conform to what we were expecting.')
mk('There is an other field named "skip" if needed. Among the list of candidates selected by the regular expression, they are sorted according to the "sort" parameter, the first "skip" will be ignored, and we will take the "take" after.')
mk('From day to day, from month to month, the result of such an aggregation is not a constant. This is the advantage of this method; to be able to build a report whose result is varying in time but without the need to rebuild this report each time.')
mk('Before to see the result of such an aggregation, we should consider first the "method" field to know if we have to average data. When we are aggregating many reports in time, the number of points is the sum of the number of points in each report. So the result can be very high and generally it''s not necessary to keep this high number of points and furthermore the readability can be difficult.')
mk('In our example, we want to have one point per month. So we need to address the "method" field and choose an average method corresponding to our expectation.')
im(f"{mediad}/kdocagg11.png", caption="Select the method to aggreagate")
mk('Now we are ready to view the result.')
mk('###### e) viewing the result')
im(f"{mediad}/kdocagg12.png", caption="Viewing the result")
mk('You have then an overall view of a given situation (here the wait events on an Oracle database) and you can evaluate if the picture is clean , if some actions should be decided or if the result of engaged actions is conclusive.')
mk('Of course, all available charts at the detailed level are available at the aggregated level.')
mk('###### Filtering on time')
mk('In the above example, filtering data on time has not been applied. Every data coming from a producer node is included in the result. KAIROS gives the capability to filter data coming from the producer node. In the "aggregator" section, there is an additional field named "TimeFilter" allowing to restrict data coming from producers.')
mk('This field is a regular expression who will be applied on the "timestamp" field when data is copied from a producer to the aggregated node. By default, this regular expression equals "." so that everything is taken from a producer.')
mk('Within KAIROS a timestamp is a 17 characters length field with the following meaning: "YYYYMMDDHHMNSSXXX" where:')
mk('"YYYY" is the year')
mk('"MM" is the month')
mk('"DD" is the day')
mk('"HH" is the hour')
mk('"MN" is the minute')
mk('"SS" is the second')
mk('"XXX" is the millisecond"')
mk('Let''s take an example:')
mk('Suppose the want to take all the events when these events are between 9h and 11h. We can specify the time filter like this: "^........(09|10).......$"')
mk('8 "." characters for the year (4), the month (2) and the day (2) followed by an alternative for the hour (09 or 10) followed by 7 "." characters for the minute (2), the second(2) and the millisecond(3).')
im(f"{mediad}/kdocagg13.png", caption="Filtering the result")
mk('With that definition, the previous chart becomes:')
im(f"{mediad}/kdocagg14.png", caption="Viewing the result")
mk('Note the difference on the Y axis.')
mk('If the time selection is the range between 20h and 22h, the result will be:')
im(f"{mediad}/kdocagg15.png", caption="Viewing the result")

subheadercontents("How to consolidate data within KAIROS", contents, anchor='consolidate', divider='rainbow')
mk('###### Justifying the need to consolidate')
mk('Aggregating is the way to group data on a time axis. We have collected data for different periods regarding a same activity and aggregating is the way to have a global view on this activity by enlarging the time frame.')
mk('Consolidating is also a way to group data but not on a time axis. We have collected data on several activities on different periods and consolidating is the way to have a global view for several activities on a single period.')
mk('For example, for an application server we have several nodes running the application, we have captured data at Os level on each node et we want to have a single view of the global CPU consumption for all nodes. Consolidating is the way to do this.')
mk('###### How to consolidate ?')
mk('Let''s take an example: ')
im(f"{mediad}/kdoccon1.png", caption="Select a node")
mk('We have the following picture: A node "CONSOLIDATE" and under this node, 2 other nodes "NODE1" and "NODE2" and for each of them we have date coming from May 19th, 2014.')
mk('We would like, at OS Level (statistics coming from nmon) to consolidate data coming from both NODE1 and NODE2 for this particular day.')
mk('How to do ?')
mk('###### a) create a new node and rename it to some mnemonic value')
mk('This new node should be independent of both NODE1 and NODE2 but under consolidate. We will name it, for example, ALL_NODES')
im(f"{mediad}/kdoccon2.png", caption="Create a node")
mk('###### b) create a new node under ALL_NODES who will be the consolidated view of both NODE1/2014-05-19 and NODE2/2014-05-19')
im(f"{mediad}/kdoccon3.png", caption="Create a node")
mk('At this point, there is no link between the created node and the 2 producers in both NODE1 and NODE2')
mk('###### c) drag /CONSOLIDATE/NODE1/2014-05-19 over /CONSOLIDATE/ALL_NODES/2014-05-19 while the "ALT" key is pressed')
im(f"{mediad}/kdoccon4.png", caption="Drag node")
mk('This has the effect to turn red the chip attached to the target. If we open this node, we could see that /CONSOLIDATE/NODE1/2014-05-19 is a producer')
im(f"{mediad}/kdoccon5.png", caption="View producers")
mk('###### d) drag /CONSOLIDATE/NODE2/2014-05-19 over /CONSOLIDATE/ALL_NODES/2014-05-19 while the "ALT" key is pressed')
mk('Here we are repeating the step above but we are dragging from a different node (NODE2/2014-05-19 instead of NODE1/2014-05-19.')
mk('If we have more than 2 nodes, we can repeat this operation as much as we want, changing each time the origin.')
mk('###### e) open the aggregated node')
im(f"{mediad}/kdoccon6.png", caption="Open aggregated node")
mk('When the drag &amp; drop operations are complete, we should find in the producers list all nodes from which we want to take data.')
mk('In this example the "selector" in the "aggregator" section is : /CONSOLIDATE/NODE1/2014-05-19$|/CONSOLIDATE/NODE2/2014-05-19$')
mk('This is a list of 2 regular expressions. The separator character is "|".')
mk('The first regular expression is "/CONSOLIDATE/NODE1/2014-05-19$", the second is "/CONSOLIDATE/NODE2/2014-05-19$". KAIROS doesn''t try to simplify the list of regular expression. We could have written it as follow: /CONSOLIDATE/NODE./2014-05-19$. The result would have been the same:')
im(f"{mediad}/kdoccon7.png", caption="Open aggregated node")
mk('In such an operation (consolidating), it''s very important to consider the aggregation level. Data coming from NODE1 and NODE2 don''t have necessarily the same timestamps. It''s important to check timestamps in NODE1 and NODE2 and consider an aggregation level to be sure to have the same timestamps for both NODE1 and NODE2.')
mk('In this particular example, an average method set to 10 minutes is a good choice:')
im(f"{mediad}/kdoccon8.png", caption="Select average method")
mk('###### f) view the result')
im(f"{mediad}/kdoccon9.png", caption="View the result")
mk('Above an example of result on the aggregated node. It''s easy to check that the result is the sum of the result for NODE1 and NODE1.')
mk('for NODE1:')
im(f"{mediad}/kdoccon10.png", caption="Result for node 1")
mk('for NODE2:')
im(f"{mediad}/kdoccon11.png", caption="Result for node 2")
mk('In order to compare, there is a better way to compare data within KAIROS. See How to compare data within KAIROS')

subheadercontents("How to compare data within KAIROS", contents, anchor='compare', divider='rainbow')
mk('###### Justifying the need to compare')
mk('To compare data, we can of course display a first chart and then a second chart and compare visually the 2 generated charts in 2 separate windows. This works if differences are obvious. Sometimes differences are more awkward especially when axis don''t have the same scale.')
mk('An illustration of this: below an example of an Oracle RAC database with several nodes and we want to compare the activity of node1 and node2 for a given day:')
im(f"{mediad}/kdoccmp1.png", caption="Select node")
mk('Without a compare function we could see this for node1:')
im(f"{mediad}/kdoccmp2.png", caption="Example")
mk('and this for node 2:')
im(f"{mediad}/kdoccmp3.png", caption="Example")
mk('All y axis have a different scale and it''s very difficult to compare something.')
mk('Instead of this, KAIROS gives the capability to have this view:')
im(f"{mediad}/kdoccmp4.png", caption="Compare node horizontally")
mk('or even this view:')
im(f"{mediad}/kdoccmp5.png", caption="Compare node vertically")
mk('KAIROS allows to draw several plots within a unique chart.  They are sharing either the Y axis or the X (time) axis.')
mk('In the charts above, the yellow area shows the CPU consumption on each node. Sharing Y axis has the effect to have a better feeling of what the difference is. Sharing X axis is useful to perceive a global impact on a particular period in time.')
mk('###### How to compare')
mk('In the example above, we are proceeding like this:')
mk('###### a) create a node who will be the cluster view')
im(f"{mediad}/kdoccmp6.png", caption="Create a node")
mk('###### b) create within CLUSTER_VIEW a new node who will be the comparison between NODE1-2015-03-25,3 and NODE2-2015-03-25,3')
im(f"{mediad}/kdoccmp7.png", caption="Create a node")
mk('###### c) drag NODE1-2015-03-25,3 over the created node while pushing the "Ctrl" Key')
im(f"{mediad}/kdoccmp8.png", caption="Drag node")
mk('Once the drag &amp; drop is complete, the yellow chip turns green')
mk('###### d) drag NODE2-2015-03-25,3 over the created node while pushing the "Ctrl" Key')
im(f"{mediad}/kdoccmp9.png", caption="Drag node")
mk('After this step, if we open the "green" node, we should see this:')
im(f"{mediad}/kdoccmp10.png", caption="View node")
mk('The node has a type "C" (like compare) and it has 2 producers.')
mk('The node is now ready to be browsed. All charts available against producers will be available in the node dedicated to the comparison.')
mk('###### How to share Y axis or X axis ?')
mk('Answer: through the settings options.')
im(f"{mediad}/kdoccmp11.png", caption="Settings")
mk('There is an option named "Plot orientation". When the selected value is "horizontal", plots are sharing the Y axis, and when the selected value is "vertical", plots are sharing the X (time) axis.')
mk('###### Is it possible to compare aggregated data ?')
mk('Indeed, you can create aggregated data or consolidated data and at the end compare this data with other nodes. But comparison is the last step: you cannot aggregate or consolidate data from "compare" nodes.')
mk('###### Mnemonic way to associate keyboard keys with "aggregate" or "compare"')
mk('"Aggregate" begins with letter "A" like the "Alt" key')
mk('"Compare" begins with letter "C" like the "Ctrl" key')

subheadercontents("How to put in place automatic aggregation", contents, anchor='automatic', divider='rainbow')
mk('###### Why an automatic aggregation?')
mk('Manual consolidation as explained in How to consolidate data within KAIROS is useful when this kind of operation occurs infrequently. Conversely, if that operation is need frequently, every day for example, the manual operating mode can become tedious.')
mk('An example is the following: we are collecting data every day on several nodes and we would like to have a consolidated view of these nodes every day. To overcome this tedious task, we have implemented a mechanism allowing to create automatic aggregates.')
mk('###### How to do this ?')
mk('We are going to reuse the example taken in How to consolidate data within KAIROS. The picture is the following:')
im(f"{mediad}/kdocaut1.png", caption="Select node")
mk('We have uploaded data into CONSOLIDATE/NODE1/2014-05-19 and CONSOLIDATE/NODE2/2014-05-19. We have explained how to generate "manually" the node CONSOLIDATE/ALL_NODES/2014-05-19.')
mk('Now we are going to reach the same objective but with a different way:')
mk('###### a) create a new node under CONSOLIDATE')
mk('We have then the following picture:')
im(f"{mediad}/kdocaut2.png", caption="Create node")
mk('###### b) drag NODE1 over the new created node while the "Windows key" is pressed')
mk('This leads to the following picture:')
im(f"{mediad}/kdocaut3.png", caption="View node")
mk('The yellow chip of AUTOMATIC_NODE has turned purple')
mk('###### c) drag NODE2 over the new created node while the "Windows key" is pressed')
mk('Now to check what happened, we can open AUTOMATIC NODE to have a look to its properties:')
im(f"{mediad}/kdocaut4.png", caption="Open node")
mk('Its looks like an aggregation (or consolidation or average) except the node type is "L". We can update everything in the "aggregator" section. ')
mk('Let''s update the "method" field to "10 minutes":')
im(f"{mediad}/kdocaut5.png", caption="Update method")
mk('Before pressing the "Apply aggregator" button, let''s check the repository:')
im(f"{mediad}/kdocaut6.png", caption="View node")
mk('There is nothing under AUTOMATIC_NODE.')
mk('Now if we press "Apply Aggregator", let''s check the repository:')
im(f"{mediad}/kdocaut7.png", caption="View node")
mk('A node has been created under AUTOMATIC_NODE. It''s an aggregate and it represents the consolidated view of NODE1/2014-05-19 and NODE2/2014-05-19')
mk('Now suppose, we are uploading new data under CONSOLIDATE/NODE1 and CONSOLIDATE/NODE2 like this:')
im(f"{mediad}/kdocaut8.png", caption="View node")
mk('Now if we open again AUTOMATIC_MODE and if we press again "Apply aggregator", we will have:')
im(f"{mediad}/kdocaut9.png", caption="Select node")
mk('A new node has been created under AUTOMATIC_NODE.')
mk('In fact to synchronize AUTOMATIC_NODE with both NODE1 and NODE2, we have only to push the "apply aggregator" button in AUTOMATIC_NODE.')
mk('With this mecanism, data can be uploaded over the water and consolidated data is immediately available.')

subheadercontents("KAIROS customization", contents, anchor='custo', divider='rainbow')
mk('KAIROS can be customized. It''s delivered with more than one thousand objects and these objects can be viewed or updated here:')
im(f"{mediad}/kdoccus1.png", caption="Kairos objects")
mk('When "Manage objects" is selected, a window appears like the one after:')
im(f"{mediad}/kdoccus2.png", caption="Manage objects")
mk('An object has mainly an id (an internal identifier in the OrientDB database), a name, a type and a repository origin.')
mk('The KAIROS engine knows nothing about Oracle, Postgres, the system under they run, .... All this semantic is included in objects which are customizable.')
mk('A user can address a new domain not known by KAIROS by adding new objects. Doing this, he will be able to draw new charts without the need to extend the KAIROS engine.')
mk('Some objects like CHARTS or MENUS are very easy to create or update, some of them (ANALYZERS, LIVEOBJECTS) are more complex and can require advanced skills in programming languages.')
mk('The list of object types is the following (in the alphabetic order):')
st.code("""
aggregators
analyzers
charts
choices
colors
functions
gcharts
liveobjects
menus
queries
templates
wallpapers
        """)
mk('An object can be downloaded on the user workstation or conversely uploaded from the user workstation to the KAIROS repository. Most of the time (except for wallpapers), an object can be edited in place, for one of them (gchart) there is a graphical editing function.')
mk('To download or edit an object, it must be selected first.')
mk('An exemple if I want to edit the "$hour aggregator":')
im(f"{mediad}/kdoccus3.png", caption="Editing an object")
mk('###### Editing objects')
mk('Pushing "Edit object" makes appear the following window:')
im(f"{mediad}/kdoccus4.png", caption="Edit window")
mk('Editable objects are written in PYTHON syntax.')
mk('They have all the same structure with a dictionary object = { ....}. This dictionary looks like a JSON structure describing the object properties.')
mk('Sometimes (above is an example), but not always, there are methods  (here we have "fhour" and "__hash__") attached to the object.')
mk('The editor is a "VI" editor with most of the capabilities of a standard VI editor.')
mk('At the end, when editing is over, the user can press the "Save" button to record updates within KAIROS.')
mk('We have then the following within Kairos:')
im(f"{mediad}/kdoccus5.png", caption="Editing an object")
mk('We have edited "$hour" coming from the "kairos_system_system" repository but the update has been stored under "kairos_user_examples".')
mk('There are several rules to keep in mind:')
mk('a) Objects in system repositories cannot be updated. This is a protection against corruption. If the update is not good, there is a risk to have problems within Kairos. In such a case, you can remove the wrong object and find again the default behaviour.')
mk('b) Updated objects are stored in the current repository (here kairos_user_examples). In this example, only user "examples" can benefit of his update. Other users will not be impacted by the update done by "examples" user. To share updates, users must use the role capability of KAIROS in order to share repositories.')
mk('c) There is no "Create object" option. To create a new object, a user must choose an object in the list, update its "id" and save the result.')
mk('d) Before to get an object in the system repository, KAIROS always search an object with the same name and the type in the user repository. The customized version has priority over the system version.')
mk('e) Most of the time customized objects are available immediately excepts menus. For menus, when a menu is customized, it will be available if the window attached to the explorer is closed and then opened (menus are loaded within KAIROS when an explorer is opened)')
mk('####### About graphical editing')
mk('Graphical editing is reserved for objects with type "gchart". An exemple:')
im(f"{mediad}/kdoccus6.png", caption="Editing an object")
mk('Pushing "Graphical edit" on this object shoud lead to:')
im(f"{mediad}/kdoccus7.png", caption="Graphical editing")
mk('This is an example of a definition of a chart. There are objects with relationships and for each object a set of attributes. ')
mk('The KAIROS user can update attributes, add new objects, copy and paste whole structures, ...')
mk('All charts within KAIROS should be built with this editor. All charts delivered with the tool (objects in the system repository) have been built with this graphical editor.')
mk('At the end of the editing session, the user can "save" the result (a gchart object stored in the repository) and/or "generate" other objects (one chart and several queries). ')


tcontents.markdown(" ".join([str(item) for item in contents]))
